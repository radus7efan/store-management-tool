openapi: '3.0.3'
info:
  version: 1.0.0
  title: Store Management Tool
  description: |-
    Rest API definition of the store management tool application.

    Some useful links:
    - [Github repository](https://github.com/radus7efan/store-management-tool)
    - [Readme](https://github.com/radus7efan/store-management-tool/blob/main/README.md)

  contact:
    name: Radu Stefan
    email: radustef.an@yahoo.ro
    url: https://github.com/radus7efan

servers:
  - url: https://localhost:8181/api/swagger/
tags:
  - name: Products
    description: Operations that aim to manage store products.
paths:
  /products:
    post:
      tags:
        - Products
      summary: Add new productt.
      description: This operation is used to add a new product in the inventory.
      operationId: addProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - Products
      summary: Fetch all available products.
      description: This operation is used to retrieve all products.
      operationId: fetchProducts
      parameters:
        - name: stockStatus
          in: query
          required: false
          description: Availability status of the product to filter and fetch products that match the criteria.
          schema:
            $ref: '#/components/schemas/StockStatus'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          $ref: '#/components/responses/500'
  /products/{productId}:
    get:
      tags:
        - Products
      summary: Fetch product by unique identifier.
      description: This operation is used to retrieve a product by a unique identifier.
      operationId: fetchProductById
      parameters:
        - $ref: '#/components/parameters/productId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Products
      summary: Update product by unique identifier.
      description: This operation is used to update a product by a unique identifier.
      operationId: updateProductById
      parameters:
        - $ref: '#/components/parameters/productId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - Products
      summary: Delete product by unique identifier.
      description: This operation is used to delete a product by a unique identifier.
      operationId: deleteProductById
      parameters:
        - $ref: '#/components/parameters/productId'
      responses:
        '200':
          description: Successful operation
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
components:
  parameters:
    productId:
      name: productId
      in: path
      required: true
      description: >-
        Unique product identifier used to fetch, update or delete a product.
      example: 36411281-197e-4806-a610-17a81aa770ed
      schema:
        type: string
        format: uuid
  responses:
    '400':
      description: Bad Request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            title: Bad Request
            status: 400
            details: Error details
            timestamp: '2023-10-07T12:23:58.075Z'
    '404':
      description: Resource not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            title: Resource not found
            status: 404
            details: Error details
            timestamp: '2023-10-07T12:23:58.075Z'
    '500':
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            title: Internal server error
            status: 500
            details: Error details
            timestamp: '2023-10-07T12:23:58.075Z'
  schemas:
    Product:
      type: object
      title: Product
      required:
        - id
        - title
        - price
        - quantity
      properties:
        id:
          type: string
          format: uuid
          description: Product unique identifier.
          example: 36411281-197e-4806-a610-17a81aa770ed
        title:
          type: string
          description: Product name.
          example: Brand Keyboard
        price:
          type: number
          format: float
          description: Product price.
          example: 254.23
        quantity:
          type: integer
          format: int32
          description: Quantity of products of the same type available in the inventory.
          example: 34
        stockStatus:
          $ref: '#/components/schemas/StockStatus'
        discount:
          description: The discount applied to the product expressed as a percentage.
          type: integer
          format: int32
          example: 10
        discountedPrice:
          type: number
          format: float
          description: Product price.
          example: 254.23
        description:
          type: string
          description: Product description.
          example: A short description about the product.
    StockStatus:
      description: Status of the product in the inventory.
      type: string
      enum:
        - IN_STOCK
        - OUT_OF_STOCK
        - LIMITED
      example: IN_STOCK
    Error:
      type: object
      title: Error data structure
      required:
        - title
        - status
        - details
        - timestamp
      properties:
        title:
          type: string
          description: A short human-readable summary of the problem.
        status:
          type: integer
          format: int32
          description: The HTTP status code.
        details:
          type: string
          description: A human-readable explanation of the occurred problem.
        timestamp:
          type: string
          format: date-time
          description: Date and time when the error occurred.
